Dialog.create("Analysis Mode");
	Dialog.addMessage("Select image analysis mode")
	arr0 = newArray("Batch Mode", "Single Run Mode");
	Dialog.addChoice("Mode: ", arr0);
	Dialog.show();
	a = Dialog.getChoice();

	if (a == "Batch Mode"){
		Batch();
	} else {
		Single();
	}

function Batch () {

macro "Batch Analysis" {

print("Program 1 starting...");

// Image source directory
dir1 = getDirectory("Choose Source Directory");

// Retrieves all images in source directory and puts them within a list
imgList = getFileList(dir1);

// Checks that there are an even number of files, ensuring there all images are paired, within the source directory, otherwise the program halts
if (imgList.length % 2 == 0){
	print("correct number of files");
} else {
	exit("Terminated: Source directory must contain an even number of files");
}

// Output image directory
dir2 = getDirectory("Choose Image Destination Directory");

// Checks if the user selects the same directory as the image source directory and output image directory, if so, allows the user to halt or continue the program
warningCheck(dir2, dir1);

// Output text file directory
dir3 = getDirectory("Choose Text File Destination Directory");

// Checks if the user selects the same directory as the image source directory and output text file directory, if so, allows the user to halt or continue the program
warningCheck(dir3, dir1);

// Setting initial values for the parameters
p = "0.1606";
po = "0.45";
y = "15000";
r = "0.000000001";
	
noise = ".2";
thres = "5";

// Opens the first image and runs a calculation to determine the interrogation window size
open(dir1+imgList[0]);
fpiv = calcpiv(getWidth(),getHeight());
close();

// Array containing alignment options
arr7 = newArray("No alignment", "Full image alignment", "Edge alignment");

// Creates and sets up dialog box for the analysis setup
Dialog.create("Analysis Setup");
Dialog.addMessage("PIV Parameters",16);
Dialog.addMessage("PIV 1");
Dialog.addNumber("1st Interrogation Window:  ", fpiv);
Dialog.addNumber("Search Window Size: ", fpiv*2);
Dialog.addMessage(" ");
Dialog.addMessage("PIV 2");
Dialog.addNumber("2st Interrogation Window: ", fpiv/2);
Dialog.addNumber("Search Window Size: ", fpiv);
Dialog.addMessage("");
Dialog.addMessage("PIV 3");
Dialog.addNumber("3rd Interrogation Window: ", fpiv/4);
Dialog.addNumber("Search Window Size: ", fpiv/2);
Dialog.addMessage("");
//Dialog.addNumber("Noise: ", noise); NOT WORKING
//Dialog.addNumber("Threshold: ",thres); NOT WORKING
Dialog.addMessage("__________________________");
Dialog.addMessage("FTTC Parameters",16);
Dialog.addNumber("Pixel size (" + fromCharCode(181) + "m)",p,5,5,"");
Dialog.addNumber("Poisson's Ratio: ", po);
Dialog.addNumber("Young's Modulus", y);
Dialog.addNumber("Regularization Factor", r,10,11,"");
Dialog.addMessage("__________________________");
Dialog.addChoice("Alignment option: ", arr7);
//Dialog.addCheckbox("Perform minimum value check", false);
Dialog.show();

// Retrieves the user input from the dialog box and saves them to new variables
p1 = Dialog.getNumber();
sw1 = Dialog.getNumber();
p2 = Dialog.getNumber();
sw2 = Dialog.getNumber();
p3 = Dialog.getNumber();
sw3 = Dialog.getNumber();
//noise = Dialog.getNumber(); NOT WORKING
//thres = Dialog.getNumber(); NOT WORKING
p = Dialog.getNumber();
po = Dialog.getNumber();
y = Dialog.getNumber();
r = Dialog.getNumber();
aln = Dialog.getChoice();
//chk = Dialog.getCheckbox();

//print("CHECK: " + chk);
chk = 0; // remove line for calcThres to work

// Calculating the default threshold value based on user inputs

if (chk == 1) {
	bthres = calcThres(dir1, dir3, p1, p2, p3, sw1, sw2, sw3, noise, thres, p, po, y, r, aln);

	// Dialog box for user to enter a background threshold value
	Dialog.create("Background Shift");
	Dialog.addNumber("Minimum Background Cutoff (Pa)", bthres);
	Dialog.show();
	bgt = Dialog.getNumber();
	} 

// Enables ImageJ's batchmode
setBatchMode(true);

// Loop that runs through all the images in the image source directory
for (j=0; j<imgList.length; j=j+2) {
	// Opens first file and cuts the name to exclude the file extension 
	open(dir1+imgList[j]);
	img1Title = substring(getTitle,0,lengthOf(getTitle)-4); 
	
	// Makes the image square and converts to 16-bit
	convert();
	
	// Opens second and converts the image
	open(dir1+imgList[j+1]);
	convert();
	
	// Turns the images into a stack, which is required for the PIV calculations
	run("Images to Stack", "name=&img1Title");
	
	// Reverses the images so they are in the correct order 
	run("Reverse");

	// Runs the align function based on the user input
	align(aln);

	// Sets the file name and location for the PIV calculations
	file_loc = dir3+"PIV_"+img1Title+".txt";
	
	print("Image analysis set up complete...");

	// Computes particle image velocimetry on a pair of images
	run("iterative PIV(Basic)...", "piv1=&p1 sw1=&sw1 piv2=&p2 sw2=&sw2 piv3=&p3 sw3=&sw3 what=[Accept this PIV and output] noise=&noise threshold=&thres c1=3 c2=1 save=&file_loc");
	print("PIV calculation "+(j/2+1)+" completed...");

	// Sets the file name and location for the FTTC calculations
	FTTC_path = dir3+"PIV_"+img1Title+".txt";

	// Computers the fourier transform traction cytometry based on the text output file from the iterative PIV calculations
	run("FTTC ", "pixel=&p poisson=&po young's=&y regularization=&r plot plot=1000 plot=1000 select=&FTTC_path");
	print("FTTC calculation "+(j/2+1) + " completed...");

	// Names, saves, and closes all of the outputed files
	imgType = "Tiff";

	saveAs("Jpeg",dir2+img1Title+"_Traction Magnitude_B&W");
	close();
	saveAs(imgType, dir2+img1Title+"_TFM Scale Bar");
	close();
	saveAs(imgType, dir2+img1Title+"_Traction Magnitude Forces");
	close();
	saveAs(imgType, dir2+img1Title+"_PIV Scale Bar");
	close();

	// Determines how many iterations of the PIV were ran to know how many images there are to save
	if ((p2 != 0) & (p3 == 0))  {
		saveAs("imgType", dir2+img1Title+"_PIV2");
		close();
		saveAs("imgType", dir2+img1Title+"_PIV1");
		close();
	}	

	// Determines how many iterations of the PIV were ran to know how many images there are to save
	if (((p2 ==0) & (p3 == 0)) |  ((p2 == 0) & (p3 != 0))) {
		saveAs(imgType, dir2+img1Title+"_PIV1");
		close();
	} 

	// Determines how many iterations of the PIV were ran to know how many images there are to save
	if ((p2 !=0) & (p3 != 0)){
		saveAs(imgType, dir2+img1Title+"_PIV3");
		close();
		saveAs(imgType, dir2+img1Title+"_PIV2");
		close();
		saveAs(imgType, dir2+img1Title+"_PIV1");
		close();
	}
	close("*");	
	
	if (chk == 1){
	// Checks if there is a minimum value below the inputed background threshold
	name1 = dir3+"Traction_PIV_"+img1Title+".txt";
	threshold(j, name1, bgt);
	}
}

setBatchMode(false); 

// Program complete message
Dialog.create("Program Completed");
Dialog.addMessage(" All images and text files have been saved ");
Dialog.show();
}
}

/**
|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Function for analyzing a single image pair below
//////////////////////////////////////////////////////////////////////////////////
**/

function Single(){

print("Program 2 starting...");

// Closes all images 
close("*");


// Selects and opens first image
file1 = File.openDialog("Select Fluorescent Bead Image (unstressed)");
open(file1);

// Saves the image title after cutting off the extension
img1Title = substring(getTitle,0,lengthOf(getTitle)-4); 

// Runs a calculation to determine the interrogation window size
fpiv = calcpiv(getWidth(),getHeight());

// Selection of the second image
file2 = File.openDialog("Select Fluorescent Bead Image (stressed)");

// Text file directory
dir4 = getDirectory("Choose Text file Destination Directory");

//Opens second image
open(file2);


// Setting initial values for the parameters
p = "0.1606";
po = "0.45";
y = "15000";
r = "0.000000001";
p1 = "128";
p2 = "64";
p3 = "32";
noise = ".2";
thres = "5";
bthres = 20;
s_name = substring(getTitle,0,lengthOf(getTitle)-4);

// Array containing alignment options
arr7 = newArray("No alignment", "Full image alignment", "Edge image alignment");

// Creates and sets up dialog box for the analysis setup
Dialog.create("Analysis Setup");
Dialog.addMessage("PIV Parameters",16);
Dialog.addMessage("PIV 1");
Dialog.addNumber("1st Interrogation Window:  ", fpiv);
Dialog.addNumber("Search Window Size: ", fpiv*2);
Dialog.addMessage(" ");
Dialog.addMessage("PIV 2");
Dialog.addNumber("2st Interrogation Window: ", fpiv/2);
Dialog.addNumber("Search Window Size: ", fpiv);
Dialog.addMessage("");
Dialog.addMessage("PIV 3");
Dialog.addNumber("3rd Interrogation Window: ", fpiv/4);
Dialog.addNumber("Search Window Size: ", fpiv/2);
Dialog.addMessage("");
//Dialog.addNumber("Noise: ", noise);  NOT WORKING
//Dialog.addNumber("Threshold: ",thres); NOT WORKING
Dialog.addMessage("__________________________");
Dialog.addMessage("FTTC Parameters",16);
Dialog.addNumber("Pixel Size (" + fromCharCode(181) + "m)",p,5,5,"");
Dialog.addNumber("Poisson's Ratio: ", po);
Dialog.addNumber("Young's Modulus", y);
Dialog.addNumber("Regularization Factor", r,10,11,"");
Dialog.addMessage("__________________________");
Dialog.addChoice("Alignment option: ", arr7);
//Dialog.addNumber("Minimum Background Cutoff (Pa)",""); UNSURE IF WORKING
Dialog.show();

// Retrieves the user input from the dialog box and saves them to new variables
p1 = Dialog.getNumber();
sw1 = Dialog.getNumber();
p2 = Dialog.getNumber();
sw2 = Dialog.getNumber();
p3 = Dialog.getNumber();
sw3 = Dialog.getNumber();
//noise = Dialog.getNumber(); NOT WORKING
//thres = Dialog.getNumber(); NOT WORKING
p = Dialog.getNumber();
po = Dialog.getNumber();
y = Dialog.getNumber();
r = Dialog.getNumber();
aln = Dialog.getChoice();
//bgt = Dialog.getNumber(); UNSURE IF WORKING

// Opens first two files
//open(file1);
//open(file2);

// Creates a list containing both images
list1 = getList("image.titles");

// For loop that converts images to 16-bit and crops them so the images are square
for(i=0; i<list1.length; i++){

	selectWindow(list1[i]);
	run("16-bit");	

	if (getWidth==getHeight) {
	print(" ");
	} else { 
		if(getWidth>getHeight) {
			edge = getHeight;
			makeRectangle(0,0,edge,edge);
			run("Crop");
		} else  {
			edge = getWidth;
			makeRectangle(0,0,edge,edge);
			run("Crop");
	}
}
}
 
// Creates a stack of the images
run("Images to Stack", "name=&s_name");

// Reverses the images so they are in the correct order for the analysis
//run("Reverse");

// Runs the align function based on the user input
align(aln);

// Sets the file name and location for the PIV calculations
file_loc = dir4+"PIV_"+img1Title+".txt";

// Computes particle image velocimetry on the pair of images
run("iterative PIV(Basic)...", "piv1=&p1 sw1=&sw1 piv2=&p2 sw2=&sw2 piv3=&p3 sw3=&sw3 what=[Accept this PIV and output] noise=&noise threshold=&thres c1=3 c2=1 save=&file_loc");

// Sets the file name and location for the FTTC calculations
FTTC_path = dir4+"PIV_"+img1Title+".txt";

// Computers the fourier transform traction cytometry based on the text output file from the iterative PIV calculations
run("FTTC ", "pixel=&p poisson=&po young's=&y regularization=&r plot plot=1000 plot=1000 select=&FTTC_path");

// Creates a list containg all of the outputed images
list2 = getList("image.titles");

// Renames all open images  
for(i = 0; i<list2.length; i++){
	if (i == 0) {
		selectWindow(list2[i]);
		rename("Image Stack");
	}
	if (i==1) {	
		selectWindow(list2[i]);
		rename("PIV1");
	}
	if (i == 2) {
		selectWindow(list2[i]);
		rename("PIV2");
	}
	if (i==3) {	
		selectWindow(list2[i]);
		rename("PIV3");
	}
	if (i == 4) {
		selectWindow(list2[i]);
		rename("Scale Bar 1");
	}
	if (i==5) {	
		selectWindow(list2[i]);
		rename("Traction Magnitude Force");
	}
	if (i==6) {	
		selectWindow(list2[i]);
		rename("Scale Bar 2");
	}
	if (i==7) {	
		selectWindow(list2[i]);
		rename("Traction Magnitude Force_B&W");
	}
}

// Checks if there is a minimum value below the inputed background threshold
files = dir4+"Traction_PIV_"+img1Title+".txt";

//threshold(0, files, bgt); uncomment to allow threshold to work

// Program complete message
Dialog.create("Program Completed");
Dialog.addMessage(" All generated images are open and text files have been saved ");
Dialog.show();

}

/* 
/////////////////////////////////////////////////////////////////////////////////////////////////////
<><><><><><><><><><><><><><><><><><><><><><>
/////////////////////////////////////////////////////////////////////////////////////////////////////

Below are functions used in the main loop of the program

/////////////////////////////////////////////////////////////////////////////////////////////////////
<><><><><><><><><><><><><><><><><><><><><><>
/////////////////////////////////////////////////////////////////////////////////////////////////////
*/

// Converts images to 16-bit and crops them
function convert(){                     
	run("16-bit");
	if(getWidth>getHeight) {
		edge = getHeight;
		makeRectangle(0,0,edge,edge);
		run("Crop");
	} else  {
		edge = getWidth;
		makeRectangle(0,0,edge,edge);
		run("Crop");
		}
}

// Calculates the interrogation window based on image size
function calcpiv(w,h){
	if (w>h) {
		val = h;
	} else {
		val =w;
	}
	x = 0;

	while ((val/4) > Math.pow(2,x)){
		x = x+1;
	}
	if ((val/4) == Math.pow(2,x)) {
		return Math.pow(2,x);
	} else {
		return Math.pow(2,(x-1));
	}
}

// Calculates if there is some background vector magnitude that is below some value, alpha

function threshold(runNum, filepath, alpha){
	
	filestring = File.openAsString(filepath);
	apple = split(filestring);

	assump = "Error"; 

	for (i = 4; i<apple.length; i=i+5){
		if(round(apple[i]) <= alpha) {
			assump = "No Error";
		} 
	}

	if (assump == "Error"){
		Dialog.create("Error");
		Dialog.addMessage("There was no background values below "+alpha+ "Pa on run "+(runNum/2)+1);
		Dialog.show();
	} else {
		print("");
	}

}

// Calculates a default acceptable background threshold

function calcThres(dir1, dir3, p1, p2, p3, sw1, sw2, sw3, noise, thres, p, po, y, r, aln){
	print("g");
	if (dir1 == "none"){
		
	} else {
	close("*");
	open(dir1+imgList[0]);
	img1Title = substring(getTitle,0,lengthOf(getTitle)-4);
	convert();

	open(dir1+imgList[1]);
	convert();
	} 
	print("h");

	run("Images to Stack", "name=tempStack");
	run("Reverse");
	
	a = getWidth();
	align(aln);	

	file_loc = dir3+"PIV_"+img1Title+".txt";
	run("iterative PIV(Basic)...", "piv1=&p1 sw1=&sw1 piv2=&p2 sw2=&sw2 piv3=&p3 sw3=&sw3 what=[Accept this PIV and output] noise=&noise threshold=&thres c1=3 c2=1 save=&file_loc");
	close("*");	

	FTTC_path = dir3+"PIV_"+img1Title+".txt";
	run("FTTC ", "pixel=&p poisson=&po young's=&y regularization=&r plot plot=1000 plot=1000 select=&FTTC_path");

	close("*");
	
	filepath = dir3+"Traction_PIV_"+img1Title+".txt";
	
	filestring = File.openAsString(filepath);
	apple = split(filestring);
	
	low = round(apple[4]);

	for (i = 4; i<apple.length; i=i+5){
		
		if (round(apple[4]) > round(apple[i])){
			low = apple[i];
		}
	}

	val = round(low)*2+10;  
	// very arbitrary 
	
	return val;
}

// Alignment function
function align(type){

	if (type == "No alignment") {
		print(aln);
	} 
	if (type == "Full image alignment"){
		run("Align slices in stack...", "method=5 windowsizex="+getWidth()+" windowsizey="+getWidth()+" x0=0 y0=0 swindow=0 subpixel=false itpmethod=0 ref.slice=1 show=true");
	}
	if (type == "Edge alignment"){
		run("Align slices in stack...", "method=5 windowsizex="+floor(getWidth()/5)+" windowsizey="+getWidth()+" x0=0 y0=0 swindow=0 subpixel=false itpmethod=0 ref.slice=1 show=true");
	}
}


// Checks if two selected directories are the same
function warningCheck(d1, d2){
	print("entered warning");
	if (d1 == d2){
	
		Dialog.create("Warning");
		Dialog.addMessage("One of the selected directories is the same as image source directory");
		arr0 = newArray("yes, continue", "no, halt the program");
		Dialog.addChoice("Would you still like to continue?", arr0);
		Dialog.show();
		a = Dialog.getChoice();
	if (a == "no, halt the program"){
		print("program halted");
		exit();
	}

}

}

// ADD OPTION TO REVERSE FILES (if their images of dead/live are in the wrong order)

